#!/usr/bin/env python3
#
# Name:
# add_operational_status
#
# Purpose:
# Add a operational_status to a MMD dataset. This field can be repeated.
# 
# Author:
# Øystein Godøy, METNO/FOU, 2020-10-06, original version
#
import sys
import os
import argparse
import lxml.etree as ET
from datetime import datetime
import pytz

def parse_arguments():
    parser = argparse.ArgumentParser(
            description='Add MMD operational_status element to MMD records. '+
            'For handling of multiple files run through find. Valid keywords are provided in https://htmlpreview.github.io/?https://github.com/metno/mmd/blob/master/doc/mmd-specification.html#operational-status, checking against vocabulary server to be added.')
    parser.add_argument('operational_status', type=str, help='String representing operational_status')
    parser.add_argument('infile', type=str, help='File to update')
    parser.add_argument('-o','--overwrite', action='store_true', help='Overwrite existing element field (i.e. replace).')
    try:
        args = parser.parse_args()
    except:
        sys.exit()
    return(args)

def add_os(myfile, os, overwrite):
    # Read input file
    try:
        myxml = ET.parse(myfile)
    except:
        print("Couldn't parse input file ", myfile)
        raise

    myroot = myxml.getroot()

    # Find existing elements
    myels =  myroot.findall("mmd:operational_status", namespaces=myroot.nsmap)

    # Construct element
    myp = ET.Element(ET.QName(myroot.nsmap['mmd'],"operational_status"),nsmap=myroot.nsmap)
    myp.text = os
    if myels:
        for el in myels:
            el.addnext(myp)
            if overwrite:
                print('Replacing existing element in ', myfile)
                el.getparent().remove(el)
    else:
        print('No previous element found, adding now...')
        myel =  myroot.find("mmd:collection", namespaces=myroot.nsmap)
        myel.addnext(myp)

    # Dump results to file
    myxml.write(myfile, pretty_print=True)

    return

if __name__ == '__main__':
    # Parse command line arguments
    try:
        args = parse_arguments()
    except Exception as e:
        print(e)
        sys.exit()

    # Process file
    try:
        add_os(args.infile, args.operational_status, args.overwrite)
    except Exception as e:
        print(e)
        sys.exit()

