#!/usr/bin/env python3
#
# Name:
# set_inactive
#
# Purpose:
# Set datasets to inactive before reingestion
# 
# Author:
# Øystein Godøy, METNO/FOU, 2020-10-06, original version
#
import sys
import os
import argparse
import lxml.etree as ET
from datetime import datetime
import pytz


def parse_arguments():
    parser = argparse.ArgumentParser(
            description='Set dataset as Active (-a) or Inactive (no switch). '+
            'For handling of multiple files run through find.')
    parser.add_argument('infile', type=str, help='File to update')
    parser.add_argument('-a','--active', action='store_true', help='Set Active.')
    try:
        args = parser.parse_args()
    except:
        sys.exit()
    return(args)

def update_last_metadata(myupdate, mynsmap, mystatus):

    if myupdate == None:
        print('No statement found, adding one...')
        myp = ET.Element(ET.QName(mynsmap['mmd'],"last_metadata_update"),nsmap=mynsmap)
        myp2 = ET.SubElement(myp,ET.QName(mynsmap['mmd'],"update"),nsmap=mynsmap)
        ET.SubElement(myp2,ET.QName(mynsmap['mmd'],"datetime"),nsmap=mynsmap).text = datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ") 
        ET.SubElement(myp2,ET.QName(mynsmap['mmd'],"type"),nsmap=mynsmap).text =  'Major modification'
        ET.SubElement(myp2,ET.QName(mynsmap['mmd'],"note"),nsmap=mynsmap).text = "Added missing last_metadata_update and set dataset status to "+mystatus
        myroot.append(myp) # Not sure it should be append here...
    else:
        myp2 = ET.SubElement(myupdate,ET.QName(mynsmap['mmd'],"update"),nsmap=mynsmap)
        ET.SubElement(myp2,ET.QName(mynsmap['mmd'],"datetime"),nsmap=mynsmap).text = datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ") 
        ET.SubElement(myp2,ET.QName(mynsmap['mmd'],"type"),nsmap=mynsmap).text =  'Major modification'
        ET.SubElement(myp2,ET.QName(mynsmap['mmd'],"note"),nsmap=mynsmap).text = "Set dataset status to "+mystatus
        myupdate.append(myp2)

    return(myupdate)

def set_active(myfile):
    # Read input file
    try:
        myxml = ET.parse(myfile)
    except:
        print("Couldn't parse input file",myfile)
        raise

    myroot = myxml.getroot()

    # Find existing elements
    myel =  myroot.find("mmd:metadata_status", namespaces=myroot.nsmap)
    if myel is None:
        # Create 
        myp = ET.Element(ET.QName(myroot.nsmap['mmd'],"metadata_status"),nsmap=myroot.nsmap)
        myp.text = "Inactive"
        # Find location of identifier and add after
        myid =  myroot.find("mmd:metadata_identifier", namespaces=myroot.nsmap)
        myid.addnext(myp)
    else:
        # Update
        myel.text = "Active"

    # Update last_metadata_status
    myupdate = myroot.find("mmd:last_metadata_update",namespaces=myroot.nsmap)
    update_last_metadata(myupdate, myroot.nsmap, 'Active')

    # Dump results to file
    #myxml.write('myfile.xml', pretty_print=True)
    myxml.write(myfile, pretty_print=True)

    return

def set_inactive(myfile):
    # Read input file
    try:
        myxml = ET.parse(myfile)
    except:
        print("Couldn't parse input file",myfile)
        raise

    myroot = myxml.getroot()

    # Find existing elements
    myel =  myroot.find("mmd:metadata_status", namespaces=myroot.nsmap)
    if myel is None:
        # Create 
        myp = ET.Element(ET.QName(myroot.nsmap['mmd'],"metadata_status"),nsmap=myroot.nsmap)
        myp.text = "Inactive"
        # Find location of identifier and add after
        myid =  myroot.find("mmd:metadata_identifier", namespaces=myroot.nsmap)
        myid.addnext(myp)
    else:
        # Update
        myel.text = "Inactive"

    # Update last_metadata_status
    myupdate = myroot.find("mmd:last_metadata_update",namespaces=myroot.nsmap)
    update_last_metadata(myupdate, myroot.nsmap, 'Inactive')

    # Dump results to file
    #myxml.write('myfile.xml', pretty_print=True)
    myxml.write(myfile, pretty_print=True)

    return

if __name__ == '__main__':

    # Parse command line arguments
    try:
        args = parse_arguments()
    except Exception as e:
        print(e)
        sys.exit()

    # Process file
    if args.active:
        try:
            set_active(args.infile)
        except Exception as e:
            print(e)
            sys.exit()
    else:
        try:
            set_inactive(args.infile)
        except Exception as e:
            print(e)
            sys.exit()
