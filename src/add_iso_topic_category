#!/usr/bin/env python3
#
# Name:
# add_iso_topic_category
#
# Purpose:
# Add iso_topic_category to a MMD dataset. This field can be repeated.
# 
# Author:
# Øystein Godøy, METNO/FOU, 2020-10-06, original version
#
import sys
import os
import argparse
import lxml.etree as ET
from datetime import datetime
import pytz

def parse_arguments():
    parser = argparse.ArgumentParser(
            description='Add iso_topic_category element to MMD records. '+
            'For handling of multiple files run through find. Valid keywords are provided in https://htmlpreview.github.io/?https://github.com/metno/mmd/blob/master/doc/mmd-specification.html#iso-topic-categories-type, checking against vocabulary server to be added.')
    parser.add_argument('iso_topic_category', type=str, help='String representing iso_topic_category')
    parser.add_argument('infile', type=str, help='File to update')
    parser.add_argument('-a','--append', action='store_true', help='Add element field even if it exists.')
    parser.add_argument('-o','--overwrite', action='store_true', help='Overwrite existing element field (i.e. replace).')
    try:
        args = parser.parse_args()
    except:
        sys.exit()
    return(args)

def add_at(myfile, isotc, overwrite, append):
    # Read input file
    try:
        myxml = ET.parse(myfile)
    except:
        print("Couldn't parse input file ", myfile)
        raise

    myroot = myxml.getroot()

    # Find existing elements
    myel =  myroot.find("mmd:iso_topic_category", namespaces=myroot.nsmap)
    if myel is not None and not append and not overwrite:
        print('Already specified, not changing anything in ', myfile)
        return

    # Construct element
    myp = ET.Element(ET.QName(myroot.nsmap['mmd'],"iso_topic_category"),nsmap=myroot.nsmap)
    myp.text = isotc
    if myel is not None:
        myel.addprevious(myp)
        if overwrite:
            print('Replacing existing element in ', myfile)
            myel.getparent().remove(myel)
    else:
        myel =  myroot.findall("mmd:temporal_extent", namespaces=myroot.nsmap)[-1]
        myel.addnext(myp)

    # Dump results to file
    ET.indent(myroot, space="  ")
    myxml.write(myfile, pretty_print=True)

    return

if __name__ == '__main__':
    # Parse command line arguments
    try:
        args = parse_arguments()
    except Exception as e:
        print(e)
        sys.exit()

    if args.overwrite and args.append:
        print('Both overwrite and append is not supported as simultaneous commands yet.')
        sys.exit()

    # Process file
    try:
        add_at(args.infile, args.iso_topic_category, args.overwrite, args.append)
    except Exception as e:
        print(e)
        sys.exit()

