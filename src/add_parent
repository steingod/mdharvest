#!/usr/bin/env python3
#
# Name:
# add_parent
#
# Purpose:
# Add a parent identifier to a child dataset. 
# 
# Author:
# Øystein Godøy, METNO/FOU, 2020-10-06, original version
#
import sys
import os
import argparse
import lxml.etree as ET
from datetime import datetime
import pytz

if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser(
            description='Add parent record to MMD records. '+
            'For handling of multiple files run through find.')
    parser.add_argument('parentid', type=str, 
            help='UUID of parent record')
    parser.add_argument('infile', type=str, 
            help='File to update')
    parser.add_argument('-o','--overwrite', action='store_true', help='Overwrite existing element field (i.e. replace).')
    
    try:
        args = parser.parse_args()
    except:
        parser.print_help()
        sys.exit()

    # Read input file
    try:
        myxml = ET.parse(args.infile)
    except:
        print("Couldn't parse input file", args.infile)
        sys.exit()

    myroot = myxml.getroot()
    
    # Find existing elements
    myel =  myroot.find("mmd:related_dataset", namespaces=myroot.nsmap)
    if myel is not None and not args.overwrite:
        print('Already specified, not changing anything in ', myfile)
        sys.exit()

    # Create element to add
    mynode = ET.Element("{http://www.met.no/schema/mmd}related_dataset", relation_type='parent')
    mynode.text = args.parentid

    # Add related_dataset
    if myel is not None:
        myel.addnext(mynode)
        if args.overwrite:
            print('Replacing existing element in ', args.infile)
            myel.getparent().remove(myel)
    else:
        myroot.insert(-1, mynode)

    # Dump results to file
    ET.indent(myroot, space="  ")
    myxml.write(args.infile, pretty_print=True)
